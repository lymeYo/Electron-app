{"version":3,"file":"main.bundle.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACNA;;GAEG;AAC0B;AAC7B,6DAA6D;AACN;AACT;AAE9C,IAAI,UAA8C,CAAC;AAEnD,SAAS,YAAY;IACnB,6BAA6B;IAC7B,UAAU,GAAG,IAAI,mDAAa,CAAC;QAC7B,MAAM,EAAE,GAAG;QACX,KAAK,EAAE,GAAG;QACV,cAAc,EAAE;YACd,QAAQ,EAAE,iJAAW;YACrB,OAAO,EAAE,sCAAS,CAAC,SAAS,EAAE,qBAAqB,CAAC;YACpD,WAAW,EAAE,iJAAY;SAC1B;KACF,CAAC,CAAC;IAEH,sCAAsC;IACtC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAmB,CAAC,CAAC,CAAC;IAErE,qCAAqC;IACrC,UAAU,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QAC3B,iEAAiE;QACjE,mEAAmE;QACnE,oDAAoD;QACpD,UAAU,GAAG,SAAS,CAAC;IACzB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,wDAAwD;AACxD,yDAAyD;AACzD,sDAAsD;AACtD,mDAAa,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;IACxB,IAAI,iJAAW,IAAI,iJAAY;QAAE,YAAY,EAAE,CAAC;IAEhD,4CAAM,CAAC,UAAU,EAAE,GAAG,EAAE;QACtB,IAAI,wEAAkC,KAAK,CAAC;YAAE,YAAY,EAAE,CAAC;IAC/D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAmB,CAAC,CAAC,CAAC;AAEtC,wEAAwE;AACxE,0EAA0E;AAC1E,2BAA2B;AAC3B,4CAAM,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAC/B,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ;QAAE,8CAAQ,EAAE,CAAC;AAChD,CAAC,CAAC,CAAC;AAEH,gDAAU,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAChC,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC;AAEH,4EAA4E;AAC5E,uEAAuE;AAEvE,wDAAwD;AACjD,MAAM,gBAAgB,GAAG,iJAAY,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC","sources":["webpack://electron-react-typescript-webpack-boilerplate/external node-commonjs \"electron\"","webpack://electron-react-typescript-webpack-boilerplate/external node-commonjs \"path\"","webpack://electron-react-typescript-webpack-boilerplate/webpack/bootstrap","webpack://electron-react-typescript-webpack-boilerplate/webpack/runtime/compat get default export","webpack://electron-react-typescript-webpack-boilerplate/webpack/runtime/define property getters","webpack://electron-react-typescript-webpack-boilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://electron-react-typescript-webpack-boilerplate/webpack/runtime/make namespace object","webpack://electron-react-typescript-webpack-boilerplate/./src/main/main.ts"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Entry point of the Election app.\n */\nimport * as path from 'path';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { BrowserWindow, app, ipcMain } from 'electron';\nimport * as nodeEnv from '_utils/node-env.js';\n\nlet mainWindow: Electron.BrowserWindow | undefined;\n\nfunction createWindow() {\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    height: 600,\n    width: 800,\n    webPreferences: {\n      devTools: nodeEnv.dev,\n      preload: path.join(__dirname, './preload.bundle.js'),\n      webSecurity: nodeEnv.prod,\n    },\n  });\n\n  // and load the index.html of the app.\n  mainWindow.loadFile('index.html').finally(() => { /* no action */ });\n\n  // Emitted when the window is closed.\n  mainWindow.on('closed', () => {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = undefined;\n  });\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.whenReady().then(() => {\n  if (nodeEnv.dev || nodeEnv.prod) createWindow();\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows.length === 0) createWindow();\n  });\n}).finally(() => { /* no action */ });\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit();\n});\n\nipcMain.on('renderer-ready', () => {\n  // eslint-disable-next-line no-console\n  console.log('Renderer is ready.');\n});\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n\n// eslint-disable-next-line import/prefer-default-export\nexport const exportedForTests = nodeEnv.test ? { createWindow } : undefined;\n"],"names":[],"sourceRoot":""}